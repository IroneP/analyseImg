/*
 * Image processing : edge detection
 *
 * Authors : Pascal Guehl, Clement Picq
 */
 
/**
 * @version 1.0
 */

#include "Filter.h"

/******************************************************************************
 ******************************* INCLUDE SECTION ******************************
 ******************************************************************************/

// System
#include <cassert>

// STL
#include <algorithm>
#include <fstream>
#include <iostream>

/******************************************************************************
 ****************************** NAMESPACE SECTION *****************************
 ******************************************************************************/

// STL
using namespace std;

/******************************************************************************
 ************************* DEFINE AND CONSTANT SECTION ************************
 ******************************************************************************/
 
/******************************************************************************
 ***************************** TYPE DEFINITION ********************************
 ******************************************************************************/

/******************************************************************************
 ***************************** METHOD DEFINITION ******************************
 ******************************************************************************/

/******************************************************************************
 * Constructor
 ******************************************************************************/
Filter::Filter()
:   _size( 0 )
,   _kernel()
,   _name()
{
}

/******************************************************************************
 * Desstructor
 ******************************************************************************/
Filter::~Filter()
{
    // TODO
    // check openCV reference counter
    assert( false );
}

/******************************************************************************
 * Print info
 ******************************************************************************/
void Filter::print()
{
    // LOG
    cout << "FILTER info" << endl;
    cout << "- name: " << _name << endl;
    cout << "- size: " << _size << " x " << _size << endl;
    cout << "- kernel: " << endl;
    cout << _kernel << endl;
}

/******************************************************************************
 * Load kernel from file
 *
 * @param pFilename
 *
 * @return flag telling whether or not it succeds
 ******************************************************************************/
bool Filter::load( const char* pFilename )
{
    // LOG
    cout << "FILTER" << endl;
    cout << "- file: " << pFilename << endl;

    // Try to open file
    ifstream file( pFilename, ios::in );
    if ( ! file.is_open() )
    {
        // Close file
        file.close();

        // LOG
        cout << "- ERROR : unable to open file." << endl;

        assert( false );

        // Return exit code
        return false;
    }

    // Read data

    // Name
    file >> _name;

    // Size
    file >> _size;

    // Weights
    float a, b, c, d, e, f, g, h, i;
    file >> a >> b >> c;
    file >> d >> e >> f;
    file >> g >> h >> i;
    _kernel = ( cv::Mat_< float >( _size, _size ) << a, b, c, d, e, f, g, h, i );

    // Close file
    file.close();

    // Return exit code
    return true;
}

/******************************************************************************
 * @brief getKernel
 * @return
 ******************************************************************************/
const cv::Mat& Filter::getKernel() const
{
    return _kernel;
}

/******************************************************************************
 * @brief editKernel
 * @return
 ******************************************************************************/
cv::Mat& Filter::editKernel()
{
    return _kernel;
}
